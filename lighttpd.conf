# lighttpd configuration file
# 
## modules to load
# all other module should only be loaded if really neccesary
# - saves some time
# - saves memory
server.modules = ( 
        "mod_accesslog",
#        "mod_access",
	"mod_rewrite", 
#	"mod_redirect", 
#	"mod_alias", 
	"mod_auth", 
#	"mod_status", 
#	"mod_setenv",
#	"mod_fastcgi",
	"mod_proxy",
#	"mod_simple_vhost",
	"mod_cgi"
#	"mod_ssi",
#	"mod_usertrack",
#	"mod_expire",
#	"mod_webdav"
)

# accesslog
accesslog.filename  = "/var/log/lighttpd/access.log"

# force use of the "write" backend (closes: #2401)
server.network-backend = "write"

## a static document-root, for virtual-hosting take look at the 
## server.virtual-* options
server.document-root = "/website/"

## where to send error-messages to
#server.errorlog = "/var/log/lighttpd/error.log"

## files to check for if .../ is requested
index-file.names = ( "index.php", "index.html", "default.html", "index.htm", "default.htm" )

## mimetype mapping
mimetype.assign = (  
	".pdf"   => "application/pdf",
	".class" => "application/octet-stream",
	".pac"   => "application/x-ns-proxy-autoconfig",
	".swf"   => "application/x-shockwave-flash",
	".wav"   => "audio/x-wav",
	".gif"   => "image/gif",
	".jpg"   => "image/jpeg",
	".jpeg"  => "image/jpeg",
	".png"   => "image/png",
	".svg"   => "image/svg+xml",
	".css"   => "text/css",
	".html"  => "text/html",
	".htm"   => "text/html",
	".js"    => "text/javascript",
	".txt"   => "text/plain",
	".dtd"   => "text/xml",
	".xml"   => "text/xml",
	".sh"	 => "text/plain",
	"" 	 => "text/plain"
 )

## Use the "Content-Type" extended attribute to obtain mime type if possible
#mimetypes.use-xattr = "enable"

## send a different Server: header
## be nice and keep it at lighttpd
#server.tag = "lighttpd"
server.tag = " @gojimini / lighttpd / gojigeje[at]gmail.com"
#server.tag = " @gojimini / gojigeje@gmail.com / Apache/1.3.29 (Unix) mod_perl/1.29 PHP/4.4.1 mod_ssl/2.8.16 OpenSSL/0.9.7g"

$HTTP["url"] =~ "\.pdf$" {
	server.range-requests = "disable"
}

##
# which extensions should not be handle via static-file transfer
#
# .php, .pl, .fcgi are most often handled by mod_fastcgi or mod_cgi
static-file.exclude-extensions = ( ".php", ".pl", ".fcgi" )

######### Options that are good to be but not neccesary to be changed #######

## bind to port (default: 80)
server.port = 8000

## bind to localhost (default: all interfaces)
server.bind = "localhost"

## error-handler for status 404
#server.error-handler-404 = "/error-handler.html"
#server.error-handler-404 = "/error-handler.php"

## to help the rc.scripts
server.pid-file = "/var/run/lighttpd.pid"


###### virtual hosts
##
##   If you want name-based virtual hosting add the next three settings and load
##   mod_simple_vhost
##
## document-root =
##   virtual-server-root + virtual-server-default-host + virtual-server-docroot or
##   virtual-server-root + http-host + virtual-server-docroot
##
#simple-vhost.server-root = "/home/weigon/wwwroot/servers/"
#simple-vhost.default-host = "grisu.home.kneschke.de"
#simple-vhost.document-root = "/pages/"


## 
## Format: <errorfile-prefix><status>.html
## -> ..../status-404.html for 'File not found'
#server.errorfile-prefix = "/www/error-"

## virtual directory listings
server.dir-listing = "enable"

## send unhandled HTTP-header headers to error-log
#debug.dump-unknown-headers = "enable"

### only root can use these options
#
# chroot() to directory (default: no chroot() )
#server.chroot = "/"

## change uid to <uid> (default: don't care)
#server.username = "nobody"
#
server.upload-dirs = ( "/tmp" )

## change uid to <uid> (default: don't care)
#server.groupname = "nobody"

#### compress module
#compress.cache-dir          = "/dev/null/"
#compress.filetype           = ("text/plain", "text/html")

#### proxy module
## read proxy.txt for more info
#proxy.server = (
#	".php" => (
#		"localhost" => (
#			"host" => "192.168.0.101",
#			"port" => 80
#		)
#	)
#)

#### fastcgi module
## read fastcgi.txt for more info
#fastcgi.server = (
#	".php" => (
#		"localhost" => (
#			"socket" => "/tmp/php-fastcgi.socket",
#			"bin-path" => "/usr/local/bin/php"
#		)
#	)
#)

#### CGI module
#cgi.assign = ( ".pl"  => "/usr/bin/perl", ".cgi" => "/usr/bin/perl" )

#### SSL engine
#ssl.engine = "enable"
#ssl.pemfile = "server.pem"

#### status module
#status.status-url = "/server-status"
#status.config-url = "/server-config"

#### auth module
## read authentification.txt for more info
#auth.backend = "plain"
#auth.backend.plain.userfile = "lighttpd.user"
#auth.backend.plain.groupfile = "lighttpd.group"
#auth.require = (
#	"/server-status" => ( 
#		"method"  => "digest",
#		"realm"   => "download archiv",
#		"require" => "group=www|user=jan|host=192.168.2.10"
#	),
#	"/server-info" => ( 
#		"method"  => "digest",
#		"realm"   => "download archiv",
#		"require" => "group=www|user=jan|host=192.168.2.10"
#	)
#)

#### url handling modules (rewrite, redirect, access)
#url.rewrite = ( "^/$" => "/server-status" )
#url.redirect = ( "^/wishlist/(.+)" => "http://www.123.org/$1" )

#### both rewrite/redirect support back reference to regex conditional using %n
#$HTTP["host"] =~ "^www\.(.*)" {
#	url.redirect = ( "^/(.*)" => "http://%1/$1" )
#}

#### expire module
#expire.url = ( "/buggy/" => "access 2 hours", "/asdhas/" => "access plus 1 seconds 2 minutes")

#### ssi
#ssi.extension = ( ".shtml" )

#### setenv
#setenv.add-request-header  = ( "TRAV_ENV" => "mysql://user@host/db" )
#setenv.add-response-header = ( "X-Secret-Message" => "42" )

#### variable usage:
## variable name without "." is auto prefixed by "var." and becomes "var.bar"
#bar = 1
#var.mystring = "foo"

## integer add
#bar += 1
## string concat, with integer cast as string, result: "www.foo1.com"
#server.name = "www." + mystring + var.bar + ".com"
## array merge
#index-file.names = (foo + ".php") + index-file.names
#index-file.names += (foo + ".php")

#### include
#include /etc/lighttpd/lighttpd-inc.conf
## same as above if you run: "lighttpd -f /etc/lighttpd/lighttpd.conf"
#include "lighttpd-inc.conf"

#### include_shell
#include_shell "echo var.a=1"
## the above is same as:
#var.a=1

#### webdav
#$HTTP["url"] =~ "^/webdav($|/)" {
# webdav.activate = "enable"
# webdav.is-readonly = "enable"
# webdav.sqlite-db-name = "/var/run/lighttpd-webdav-lock.db"
#}

## CGI module
cgi.assign = ( "cgi-bin/luci" => "", ".php" => "/usr/bin/php-cgi" )

## enable syslog
server.errorlog-use-syslog = "enable"

## mod_auth
auth.debug = 0
auth.backend = "plain"
auth.backend.plain.userfile = "/root/lighty/pwd"

## Listen di port 8089 untuk luci
$SERVER["socket"] == ":8089" {
  server.document-root = "/www/"
  auth.require = ( "" =>
    (
      "method"  => "digest",
      "realm"   => " nyasar?",
      "require" => "user=goji"
    )
  )
}

# cctv 1
$SERVER["socket"] == ":8080" {
  url.rewrite-once = ( 
    "^/snapshot/1(.*)$" => "/?action=snapshot",
    "^/stream/1(.*)$" => "/?action=stream"
  )
  proxy.server  = ( "" => (
      ( "host" => "192.168.2.9",
        "port" => 8080
      )
    )
  )
}

## listen port 80 lalu redirect ke 8000 fail????
## http://stackoverflow.com/questions/18476860
$SERVER["socket"] == ":80" {

    $HTTP["url"] =~ "(^/snapshot/1(.*)$)|(^/stream/1(.*)$)" {
      proxy.server  = ( "" => (
          ( "host" => "127.0.0.1",
            "port" => 8080
          )
        )
      )
    }

    $HTTP["url"] =~ "(^/arsip1(.*))" {
      proxy.server  = ( "" => (
          ( "host" => "192.168.2.9",
            "port" => 80
          )
        )
      )
    }

#    $HTTP["host"] =~ "([^:/]+)" {
#        url.redirect = ( "^/(.*)" => "http://%1:8000/$1" )
#    }
    
    $HTTP["host"] =~ "^(.*\.kos)$" {
      #url.redirect = ( "^/(.*)" => "https://%1/$1" )
      server.document-root        = "/website/"

        # vhost cctv.kos
        $HTTP["host"]=~ "cctv.kos|www.cctv.kos" {
          server.document-root        = "/website/cctv/"

          url.rewrite-once = (
            "^/list$" => "/?list",
            "^/stream$" => "/?list&stream",
            "^/cctv([0-9])$" => "/?cctv=$1"
          )

        }

    }

    # vhost cctv.kos
    $HTTP["host"]=~ "cctv.kos|www.cctv.kos" {
      server.document-root        = "/website/cctv/"

      url.rewrite-once = (
        "^/list$" => "/?list",
        "^/stream$" => "/?list&stream",
        "^/cctv([0-9])$" => "/?cctv=$1"
      )

    }

    # vhost mini.sejak.tk
    $HTTP["host"]=~ "mini.sejak.tk|goji.myftp.org|mini.kos" {
            server.document-root        = "/website/"
    }

    # vhost sejak.tk
    $HTTP["host"]=~ "^sejak.tk|www.sejak.tk" {
      server.document-root        = "/website/sejak.tk"
    }

    # proxy 
    $HTTP["host"]=~ "keren.sejak.tk"  {
      proxy.balance = "hash"
            proxy.server =  ("" =>
              (
                    ( "host" => "192.168.2.2", "port" => 80 )
              )
            )
      server.errorfile-prefix = "/website/err/keren-"
    }
    $HTTP["host"]=~ "free.sejak.tk|tomboy.sejak.tk|goji.ftp.sh|goji.linuxx.org"  {
            proxy.balance = "hash"
            proxy.server =  ("" =>
              (
                    ( "host" => "192.168.2.2", "port" => 80 )
              )
            )
      server.errorfile-prefix = "/website/err/keren-"
    }

}

# global error page
server.errorfile-prefix = "/website/err/"

